{
  "swagger" : "2.0",
  "info" : {
    "description" : "dbAPI",
    "version" : "v1",
    "title" : "dbapi",
    "termsOfService" : "https://developer.db.com/#/termsandconditions",
    "contact" : {
      "url" : "https://developer.db.com/#/support",
      "email" : "bank.api@db.com"
    }
  },
  "host" : "simulator-api.db.com:443",
  "basePath" : "/gw/dbapi",
  "tags" : [ {
    "name" : "Addresses"
  }, {
    "name" : "Cash Accounts"
  }, {
    "name" : "Processing Orders"
  }, {
    "name" : "Transactions"
  }, {
    "name" : "Partners"
  }, {
    "name" : "Age Certificate"
  }, {
    "name" : "Customer Solvency"
  }, {
    "name" : "Transaction Certificate"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/v1/addresses" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Reads all addresses of the current user.",
        "description" : "Reads all addresses of the current user. There might be several private and business addresses. AddressType can be BUSINESS_ADDRESS or PRIVATE_ADDRESS. Country format is ISO code.",
        "operationId" : "getAddresses",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Address"
              }
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_addresses" ]
        }, {
          "api_implicit" : [ "read_addresses" ]
        } ]
      }
    },
    "/v2/addresses" : {
      "get" : {
        "tags" : [ "Addresses" ],
        "summary" : "Reads all addresses of the current user.",
        "description" : "Reads all addresses of the current user. There might be several private and business addresses. AddressType can be BUSINESS_ADDRESS or PRIVATE_ADDRESS. Country format is ISO code.",
        "operationId" : "getAddressesV2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "properties" : {
                "addresses" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Address"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_addresses" ]
        }, {
          "api_implicit" : [ "read_addresses" ]
        } ]
      }
    },
    "/v1/cashAccounts" : {
      "get" : {
        "tags" : [ "Cash Accounts" ],
        "summary" : "Reads all cash accounts of the current user.",
        "description" : "Reads all cash accounts of the current user. Only current accounts and accounts in the currency EUR are returned. If given IBAN is not valid or does not represent an account of the current user, an empty result is returned.",
        "operationId" : "getCashAccounts",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "iban",
          "in" : "query",
          "description" : "optional - IBAN representing an account of the current user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "optional - ISO-code of the transactions' currency.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CashAccount"
              }
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_accounts" ]
        }, {
          "api_implicit" : [ "read_accounts" ]
        } ]
      }
    },
    "/v2/cashAccounts" : {
      "get" : {
        "tags" : [ "Cash Accounts" ],
        "summary" : "Reads all cash accounts of the current user.",
        "description" : "Reads all cash accounts of the current user. Only current accounts and accounts in the currency EUR are returned. If given IBAN is not valid or does not represent an account of the current user, an empty result is returned.",
        "operationId" : "getCashAccountsV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "iban",
          "in" : "query",
          "description" : "optional - IBAN representing an account of the current user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "optional - ISO-code of the transactions' currency.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "optional - limit defines count of resources per request/page.",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 100,
          "minimum" : 0
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "optional - pagination depending on the query parameter limit. Defines current page offset, starting with 0, default 0",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "properties" : {
                "totalItems" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of items found for your request parameters over all pages of the pagination.",
                  "minimum" : 0
                },
                "limit" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Count of resources per request/page.",
                  "minimum" : 0
                },
                "offset" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Current page offset.",
                  "minimum" : 0
                },
                "accounts" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CashAccount"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_accounts" ]
        }, {
          "api_implicit" : [ "read_accounts" ]
        } ]
      }
    },
    "/v1/processingOrders" : {
      "post" : {
        "tags" : [ "Processing Orders" ],
        "summary" : "Create a processing order",
        "description" : "Create a processing order. This endpoint has limited access for special consumers only. Itâ€™s possible to start manual processes only.",
        "operationId" : "createProcessingOrders",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "Idempotency-ID",
          "in" : "header",
          "description" : "Unique identifier that the caller provides to establish idempotency for this order. This is the unique ID for this newly created order.",
          "required" : true,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "Process-ID",
          "in" : "header",
          "description" : "Unique identifier that the caller to name this process, use same id as Idempotency-ID if unsure.",
          "required" : false,
          "type" : "string",
          "format" : "uuid"
        }, {
          "name" : "processingOrder",
          "in" : "formData",
          "description" : "The metadata of this processing order and their belonging documents. Must be a content-type application/json and schema #/definitions/ProcessingOrderMetadata",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "documentData",
          "in" : "formData",
          "description" : "The document data itself. You can send multiple documents with different multipart/form-data names; valid content types are: application/pdf, image/tiff or application/xml. The number of documents must match the number of document metadata provided in JSON for multipart/form-data processingOrder.documentMetas",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_client_credential" : [ "create_processing_orders" ]
        } ]
      }
    },
    "/v1/transactions" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Reads all transactions of the current cash account.",
        "description" : "Reads all transactions for a specific account of the current user. If given IBAN is not valid or does not represent an account of the current user, an empty result is returned. It is not apparent who issued a transaction, only whether the user gained or lost money by it (based on whether the amount is positive or negative respectively). The maximum number of transactions returned is 200.",
        "operationId" : "getCashAccountTransactions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "iban",
          "in" : "query",
          "description" : "mandatory - IBAN representing an account of the current user.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "optional - ISO-code of the transactions' currency. If not provided 'EUR' will be chosen. Additional information: a cash account is unique only with the combination currencyCode.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bookingDateFrom",
          "in" : "query",
          "description" : "optional - booking date of original transaction. Date in ISO 8601 format, YYYY-MM-DD. If not provided, 1980-01-01 will be chosen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bookingDateTo",
          "in" : "query",
          "description" : "optional - booking Day until which the transactions to be searched for. Date in ISO 8601 format YYY-MM-DD. If not provided, the current day will be chosen. bookingDateTo must be greater than or equal to bookingDateFrom.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "optional - order of transactions - supported sort orders are 'bookingDate[ASC]' or 'bookingDate[DESC]'. Default: 'bookingDate[ASC]'.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CashAccountTransaction"
              }
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_implicit" : [ "read_transactions" ]
        }, {
          "api_auth_code" : [ "read_transactions" ]
        } ]
      }
    },
    "/v2/transactions" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Reads all transactions of the current cash account.",
        "description" : "Reads all transactions for a specific account of the current user. If given IBAN is not valid or does not represent an account of the current user, an empty result is returned. It is not apparent who issued a transaction, only whether the user gained or lost money by it (based on whether the amount is positive or negative respectively). The maximum number of transactions returned is 200.",
        "operationId" : "getCashAccountTransactionsV2",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "iban",
          "in" : "query",
          "description" : "mandatory - IBAN representing an account of the current user.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "optional - ISO-code of the transactions' currency. If not provided 'EUR' will be chosen. Additional information: a cash account is unique only with the combination currencyCode.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bookingDateFrom",
          "in" : "query",
          "description" : "optional - booking date of original transaction. Date in ISO 8601 format, YYYY-MM-DD. If not provided, 1980-01-01 will be chosen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "bookingDateTo",
          "in" : "query",
          "description" : "optional - booking Day until which the transactions to be searched for. Date in ISO 8601 format YYY-MM-DD. If not provided, the current day will be chosen. bookingDateTo must be greater than or equal to bookingDateFrom.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "optional - order of transactions - supported sort orders are 'bookingDate[ASC]' or 'bookingDate[DESC]'.",
          "required" : false,
          "type" : "string",
          "default" : "bookingDate[ASC]"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "optional - limit defines count of resources per request/page.",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "maximum" : 200,
          "minimum" : 0
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "optional - pagination depending on the query parameter limit. Defines current page offset, starting with 0, default 0",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "properties" : {
                "totalItems" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of items found for your request parameters over all pages of the pagination.",
                  "minimum" : 0
                },
                "limit" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Count of resources per request/page.",
                  "minimum" : 0
                },
                "offset" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Current page offset.",
                  "minimum" : 0
                },
                "transactions" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CashAccountTransaction"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_implicit" : [ "read_transactions" ]
        }, {
          "api_auth_code" : [ "read_transactions" ]
        } ]
      }
    },
    "/v1/partners" : {
      "get" : {
        "tags" : [ "Partners" ],
        "summary" : "Retrieves personal information about the current partner.",
        "description" : "Retrieves personal information (e.g. first name, last name, date of birth) about the current partner.",
        "operationId" : "getPartners",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Partner"
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_partners", "read_partners_legi" ]
        }, {
          "api_implicit" : [ "read_partners", "read_partners_legi" ]
        } ]
      }
    },
    "/v2/partners" : {
      "get" : {
        "tags" : [ "Partners" ],
        "summary" : "Retrieves personal information about the current partner.",
        "description" : "Retrieves personal information (e.g. first name, last name, date of birth) about the current partner.",
        "operationId" : "getPartnersV2",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "properties" : {
                "totalItems" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of items found for your request parameters.",
                  "minimum" : 0
                },
                "partners" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Partner"
                  }
                }
              }
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_partners", "read_partners_legi" ]
        }, {
          "api_implicit" : [ "read_partners", "read_partners_legi" ]
        } ]
      }
    },
    "/v1/ageCertificate" : {
      "get" : {
        "tags" : [ "Age Certificate" ],
        "summary" : "Age Certificate",
        "description" : "'AgeCertificate' validates whether your Deutsche Bank customer is compliant with given age restrictions - based on the bank's records. Please note: This endpoint is currently only available in our APIs simulator stack and ready for you to test it. Don't hesitate to submit us your feedback and stay tuned on our future product development.",
        "operationId" : "ageCertificate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "certificationMethod",
          "in" : "query",
          "description" : "Certification method that should be used. LEGAL_AGE checks if the customer is 18 years or older. CRIMINAL_RESPONSIBILITY_AGE checks if the customer is 14 years or older.",
          "required" : true,
          "type" : "string",
          "enum" : [ "LEGAL_AGE", "CRIMINAL_RESPONSIBILITY_AGE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CertifyResponse"
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_partners" ]
        }, {
          "api_implicit" : [ "read_partners" ]
        } ]
      }
    },
    "/v1/customerSolvency" : {
      "get" : {
        "tags" : [ "Customer Solvency" ],
        "summary" : "Checks the solvency for the current customer for a given account.",
        "description" : "CustomerSolvency does the background check of a customerâ€™s creditworthiness based on past transactions and account data. A score of solvency is returned, providing you with more security that your customer is likely to pay his bill. Please note: This endpoint is currently only available in our APIs simulator stack and ready for you to test it. Don't hesitate to submit us your feedback and stay tuned on our future product development.",
        "operationId" : "getSolvency",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "iban",
          "in" : "query",
          "description" : "The signed in user can have many accounts attached to it, IBAN is required to identify the specific current account which shall be checked",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SolvencyResponse"
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_transactions" ]
        }, {
          "api_implicit" : [ "read_transactions" ]
        } ]
      }
    },
    "/v1/transactionCertificate" : {
      "get" : {
        "tags" : [ "Transaction Certificate" ],
        "summary" : "Transaction Certificate",
        "description" : "Signing new contracts such as a lease contract often require the customer to provide a salary certificate from their bank. Getting hold of such a proof can be time consuming and annoying. TransactionCertificate automates this process and provides all the necessary data instantly. All parties save time on concluding contracts. Please note: This endpoint is currently only available in our APIs simulator stack and ready for you to test it. Don't hesitate to submit us your feedback and stay tuned on our future product development.",
        "operationId" : "transactionCertificate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "iban",
          "in" : "query",
          "description" : "The signed in user can have many accounts attached to it. Thus, the IBAN is required to identify the specific current account which shall be used for the API product.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "amount",
          "in" : "query",
          "description" : "Amount which will be used in the certification method. ",
          "required" : true,
          "type" : "number"
        }, {
          "name" : "currencyCode",
          "in" : "query",
          "description" : "Currency code for the amount. (ISO 4217 e.g. EUR. Currently only EUR is supported)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "certificationMethod",
          "in" : "query",
          "description" : "Certification method which shall be used. SINGLE checks whether all found transactions equal or are higher than the entered amount. DOUBLE checks whether all found transactions are equal or higher than twice of the entered amount.",
          "required" : true,
          "type" : "string",
          "enum" : [ "SINGLE", "DOUBLE" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TransactionCertificateResponse"
            }
          },
          "default" : {
            "description" : "unsuccessful operation",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "security" : [ {
          "api_auth_code" : [ "read_transactions" ]
        }, {
          "api_implicit" : [ "read_transactions" ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "api_auth_code" : {
      "type" : "oauth2",
      "authorizationUrl" : "https://simulator-api.db.com:443/gw/oidc/authorize",
      "tokenUrl" : "https://simulator-api.db.com:443/gw/oidc/token",
      "flow" : "accessCode",
      "scopes" : {
        "read_accounts" : "Read your accounts",
        "read_transactions" : "Read your transactions",
        "read_partners" : "Read your personal info",
        "read_partners_legi" : "Read your personal legitimation info",
        "read_addresses" : "Read your addresses",
        "openid" : "Request access to OpenId Connect functionality",
        "offline_access" : "Request an OAuth2 Refresh Token"
      }
    },
    "api_client_credential" : {
      "type" : "oauth2",
      "tokenUrl" : "https://simulator-api.db.com:443/gw/oidc/token",
      "flow" : "application",
      "scopes" : {
        "create_processing_orders" : "Create processing orders"
      }
    },
    "api_implicit" : {
      "type" : "oauth2",
      "authorizationUrl" : "https://simulator-api.db.com:443/gw/oidc/authorize",
      "flow" : "implicit",
      "scopes" : {
        "read_accounts" : "Read your accounts",
        "read_transactions" : "Read your transactions",
        "read_partners" : "Read your personal info",
        "read_partners_legi" : "Read your personal legitimation info",
        "read_addresses" : "Read your addresses",
        "openid" : "Request access to OpenId Connect functionality"
      }
    }
  },
  "definitions" : {
    "ErrorResponse" : {
      "type" : "object",
      "required" : [ "errorCode", "errorDescription" ],
      "properties" : {
        "errorCode" : {
          "type" : "string",
          "description" : "The error code"
        },
        "errorDescription" : {
          "type" : "string",
          "description" : "Description of the belonging error code."
        }
      },
      "description" : "Default error response message"
    },
    "Address" : {
      "type" : "object",
      "required" : [ "city", "country", "houseNumber", "street", "zip" ],
      "properties" : {
        "street" : {
          "type" : "string",
          "description" : "Street"
        },
        "houseNumber" : {
          "type" : "string",
          "description" : "House number"
        },
        "zip" : {
          "type" : "string",
          "description" : "Zip code"
        },
        "city" : {
          "type" : "string",
          "description" : "City"
        },
        "country" : {
          "type" : "string",
          "description" : "Country"
        },
        "registeredResidence" : {
          "type" : "boolean",
          "description" : "Registered residence flag"
        },
        "addressType" : {
          "type" : "string",
          "description" : "Type of address",
          "enum" : [ "PRIVATE_ADDRESS", "BUSINESS_ADDRESS" ]
        }
      },
      "description" : "Address belonging to a user."
    },
    "PhoneNumber" : {
      "type" : "object",
      "properties" : {
        "communicationType" : {
          "type" : "string",
          "description" : "Type of Phonenumber",
          "enum" : [ "BUSINESS_PHONE", "PRIVATE_PHONE", "MOBILE_PHONE" ]
        },
        "internationalAreaCode" : {
          "type" : "string",
          "description" : "International area code"
        },
        "areaCode" : {
          "type" : "string",
          "description" : "Area code"
        },
        "telephoneNumber" : {
          "type" : "string",
          "description" : "Telephone number"
        }
      },
      "description" : "Phonenumber with type Business, Private, Mobile."
    },
    "EmailAddress" : {
      "type" : "object",
      "properties" : {
        "emailAddressType" : {
          "type" : "string",
          "description" : "Type of EmailAddress",
          "enum" : [ "PRIVATE_ADDRESS", "BUSINESS_ADDRESS" ]
        },
        "emailAddress" : {
          "type" : "string",
          "description" : "Email address"
        }
      },
      "description" : "Email-Address with type PRIVATE_ADDRESS, BUSINESS_ADDRESS."
    },
    "CashAccount" : {
      "type" : "object",
      "required" : [ "bic", "currentBalance", "iban", "productDescription" ],
      "properties" : {
        "iban" : {
          "type" : "string",
          "description" : "IBAN of the cash account"
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "ISO-code of the cash accounts' currency"
        },
        "bic" : {
          "type" : "string",
          "description" : "BIC of the cash account"
        },
        "accountType" : {
          "type" : "string",
          "description" : "Type of the cash account"
        },
        "currentBalance" : {
          "type" : "number",
          "description" : "Booked balance in EUR"
        },
        "productDescription" : {
          "type" : "string",
          "description" : "Description of the product"
        }
      },
      "description" : "A cash account."
    },
    "CashAccountTransaction" : {
      "type" : "object",
      "required" : [ "amount", "bookingDate", "originIban" ],
      "properties" : {
        "originIban" : {
          "type" : "string",
          "description" : "The IBAN of this account."
        },
        "amount" : {
          "type" : "number",
          "description" : "Amount of the transaction. If the amount is positive, the customer received money, if the amount is negative the customer lost money."
        },
        "counterPartyName" : {
          "type" : "string",
          "description" : "Name of the counter party"
        },
        "counterPartyIban" : {
          "type" : "string",
          "description" : "IBAN of the counter party"
        },
        "paymentReference" : {
          "type" : "string",
          "description" : "Payment reference"
        },
        "bookingDate" : {
          "type" : "string",
          "description" : "Booking date. In the format YYYY-MM-DD."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "ISO-code of the cash accounts' currency."
        },
        "transactionCode" : {
          "type" : "string",
          "description" : "Specifies the business transaction code (GVC)."
        },
        "externalBankTransactionDomainCode" : {
          "type" : "string",
          "description" : "Specifies the bank transaction code domain, as published in an external bank transaction code domain code list according to ISO 20022."
        },
        "externalBankTransactionFamilyCode" : {
          "type" : "string",
          "description" : "Specifies the external family code of the bank transaction code in the format of character string with a maximum length of 4 characters according to ISO 20022."
        },
        "externalBankTransactionSubFamilyCode" : {
          "type" : "string",
          "description" : "Specifies the bank transaction code sub-family, as published in an external bank transaction code sub-family code list according to ISO 20022."
        },
        "mandateReference" : {
          "type" : "string",
          "description" : "MandateReference of the direct debit transaction, max length 35 characters."
        },
        "creditorId" : {
          "type" : "string",
          "description" : "Creditor ID, max length 35 characters."
        }
      },
      "description" : "A cash account transaction."
    },
    "Partner" : {
      "type" : "object",
      "required" : [ "partnerType" ],
      "properties" : {
        "partnerType" : {
          "type" : "string",
          "description" : "Definition of the partner type",
          "enum" : [ "NATURAL_PERSON", "COMMUNITY", "ORGANIZATION" ]
        },
        "naturalPerson" : {
          "$ref" : "#/definitions/NaturalPerson"
        },
        "community" : {
          "$ref" : "#/definitions/Community"
        },
        "organization" : {
          "$ref" : "#/definitions/Organization"
        },
        "emailAddresses" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EmailAddress"
          }
        },
        "phoneNumbers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PhoneNumber"
          }
        }
      },
      "description" : "Personal data belonging to a partner which can be one of the definitions Natural Person, Community or Organization."
    },
    "NaturalPerson" : {
      "type" : "object",
      "required" : [ "dateOfBirth", "dbAPIauthenticatedUser", "firstName", "gender", "lastName" ],
      "properties" : {
        "firstName" : {
          "type" : "string",
          "description" : "First name of the partner"
        },
        "lastName" : {
          "type" : "string",
          "description" : "Last name of the partner"
        },
        "dateOfBirth" : {
          "type" : "string",
          "description" : "Birth date of the partner. In the format YYYY-MM-DD."
        },
        "gender" : {
          "type" : "string",
          "description" : "Gender of the partner",
          "enum" : [ "MALE", "FEMALE", "UNKNOWN" ]
        },
        "academicTitle" : {
          "type" : "string",
          "description" : "Academic title of the partner."
        },
        "titleOfNobility" : {
          "type" : "string",
          "description" : "Title of nobility."
        },
        "nationality" : {
          "type" : "string",
          "description" : "Nationality of partner."
        },
        "birthName" : {
          "type" : "string",
          "description" : "Birthname of partner."
        },
        "birthPlace" : {
          "type" : "string",
          "description" : "Birthplace of partner."
        },
        "legitimation" : {
          "$ref" : "#/definitions/Legitimation"
        },
        "dbAPIauthenticatedUser" : {
          "type" : "boolean",
          "description" : "This flag indicates if the currently via dbAPI authenticated user is this Partner."
        }
      },
      "description" : "A partner and the specific details for this natural person."
    },
    "Community" : {
      "type" : "object",
      "required" : [ "communityName" ],
      "properties" : {
        "communityName" : {
          "type" : "string",
          "description" : "Name of the Community."
        }
      },
      "description" : "A partner and the specific details for this communiy e.g. married couple."
    },
    "Organization" : {
      "type" : "object",
      "required" : [ "organizationName" ],
      "properties" : {
        "organizationName" : {
          "type" : "string",
          "description" : "Name of the Organization."
        }
      },
      "description" : "A partner and the specific details for this organization e.g. Company ABC."
    },
    "Legitimation" : {
      "type" : "object",
      "required" : [ "documentIssueDate", "documentIssuingAuthority", "documentNumber", "documentType" ],
      "properties" : {
        "documentType" : {
          "type" : "number",
          "description" : "Document type:\n\n\n 0 = Unknown\n 1 = ID card Germany/EU/Switzerland\n 2 = Passport\n 3 = Pass\n 4 = Child's ID card\n 5 = Preliminary German ID card\n 6 = Certificate according to Â§ 63 AsylVfG\n 7 = Passport substitute for foreigner according to Â§ 39 AuslG\n 8 = Birth certificate\n 9 = Official personnel entry in company register\n 11 = Official seal\n 13 = Diplomatic passport\n 14 = Ministerial passport\n 15 = Passport according Â§ 14 DVO-AuslG\n 20 = Preliminary German passport\n 21 = Business old age pension scheme\n 22 = Stock ownership plan\n 26 = Official Passport / Service Passport\n 27 = Travel document\n 28 = Replacement ID card\n 29 = Geneva Conventions ID card\n 30 = Release of disclosure\n 31 = Other document anti-money laundering\n"
        },
        "documentNumber" : {
          "type" : "string",
          "description" : "Document number"
        },
        "documentIssueDate" : {
          "type" : "string",
          "description" : "Document issue date. In the format YYYY-MM-DD."
        },
        "documentIssuingAuthority" : {
          "type" : "string",
          "description" : "Document issuing authority"
        },
        "documentExpirationDate" : {
          "type" : "string",
          "description" : "Document expiration date. In the format YYYY-MM-DD."
        }
      },
      "description" : "Legitimation of partner"
    },
    "CertifyResponse" : {
      "type" : "object",
      "required" : [ "certified" ],
      "properties" : {
        "certified" : {
          "type" : "boolean",
          "description" : "True and thus an age certificate is handed back if chosen certification method returns a positive result, false if not. Will be false for partners with any other type than NATURAL_PERSON."
        }
      }
    },
    "SolvencyResponse" : {
      "type" : "object",
      "properties" : {
        "score" : {
          "type" : "number",
          "format" : "int32",
          "description" : "Number between 0 and 100. The higher the score the better the solvency.",
          "minimum" : 0,
          "maximum" : 100
        },
        "businessError" : {
          "description" : "In case of error",
          "$ref" : "#/definitions/BusinessError"
        }
      }
    },
    "TransactionCertificateResponse" : {
      "type" : "object",
      "required" : [ "certified" ],
      "properties" : {
        "certified" : {
          "type" : "boolean",
          "description" : "True and thus a transaction certificate is handed back if chosen certification method returns a positive result, false if not. Will be false for partners with any other type than NATURAL_PERSON."
        },
        "businessError" : {
          "description" : "In case of error",
          "$ref" : "#/definitions/BusinessError"
        }
      }
    },
    "BusinessError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "The error code"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the business error."
        },
        "severity" : {
          "type" : "string",
          "description" : "Severity of the business error."
        }
      },
      "description" : "Business error"
    },
    "DocumentMetadata" : {
      "type" : "object",
      "required" : [ "documentName", "documentSubType", "documentType" ],
      "properties" : {
        "documentName" : {
          "type" : "string",
          "description" : "The name of the document. Must match the name of the multipart/form-data of the document data itself."
        },
        "documentType" : {
          "type" : "string",
          "description" : "The type of the document",
          "enum" : [ "CAPITAL_GAINS_TAX", "CARDS", "CERTIFICATIONS", "CORRESPONDENCE", "CURRENT_ACCOUNTS", "DEPOSIT_ACCOUNTS", "PARTNERS", "PROCESSING_ORDERS", "SECURITY_ACCOUNTS" ]
        },
        "documentSubType" : {
          "type" : "string",
          "description" : "The sub type of the document",
          "enum" : [ "SECURITY_ACCOUNTS_OPENING", "CAPITAL_GAINS_TAX", "CAPITAL_GAINS_TAX_EXCEMPTION", "CARDS_OPENING", "CORRESPONDENCE", "CURRENT_ACCOUNTS_CHANGE", "CURRENT_ACCOUNTS_OPENING", "DEPOSIT_ACCOUNTS_OPENING", "PARTNERS_AUTHORIZED_SIGNER", "PARTNERS_CHANGE", "PARTNERS_ATTACHMENTS", "PARTNERS_IDENTIFICATION_PAPER", "PARTNERS_OPENING", "PARTNERS_AGREEMENT_CONTRACTS", "PROCESSING_ORDERS_PAYMENTS", "PROCESSING_ORDERS_SECURITY", "SECURITIES", "SECURITY_ACCOUNTS_CHANGE", "SECURITY_ACCOUNTS_CLOSURE", "SECURITY_ACCOUNTS_TRADE_ACT_DOCUMENTATION" ]
        }
      }
    },
    "ProcessingOrderMetadata" : {
      "type" : "object",
      "required" : [ "createdBySystem" ],
      "properties" : {
        "createdBySystem" : {
          "type" : "string",
          "description" : "System identifier of the creator"
        },
        "parentProcessingOrderID" : {
          "type" : "string",
          "description" : "The unique ID of the order"
        },
        "processingOrderType" : {
          "type" : "string",
          "description" : "The type of the order",
          "enum" : [ "ADDRESS_CHANGE", "ARCHIVING" ]
        },
        "inputChannel" : {
          "type" : "string",
          "description" : "The input channel of the order"
        },
        "inputOriginator" : {
          "type" : "string",
          "description" : "The originator of this input"
        },
        "productGroup" : {
          "type" : "string",
          "description" : "The product group of this order.",
          "enum" : [ "SECURITY_ACCOUNTS", "ADDRESS_CHANGE", "COUNSELING_DOCUMENTATIONS", "DAS_JUNGE_KONTO", "DB_FESTZINSSPAREN", "DB_GELDMARKTSPAREN", "DB_TOPZINSSPAREN", "CONSENT_DECLARATION", "CAPITAL_GAINS_TAX_EXCEMPTION_PROCESSING", "TRADE_ACT_DOCUMENTATION_MISC", "CURRENT_ACCOUNTS_OPENING", "CREDIT_CARDS", "ONLINE_BANKING", "PARTNERS_CHANGE", "PARTNERS_OPENING", "OTHER_PROCESSING_ORDERS", "TAX_IDENTIFICATION_NUMBER", "TAX_CERTIFICATIONS", "AUTHORIZED_SIGNER", "SECURITIES_ORDERS_PURCHASE", "SECURITIES_ORDERS_SWAP", "SECURITIES_ORDERS_SELL", "PAYMENTS_PROCESSING_ORDERS", "GENERAL_AGREEMENT", "CURRENT_ACCOUNTS" ]
        },
        "processingOrderPriority" : {
          "type" : "integer",
          "description" : "The priority of this order"
        },
        "iban" : {
          "type" : "string",
          "description" : "The IBAN of the customer involved in this order",
          "minLength" : 5,
          "maxLength" : 34,
          "pattern" : "[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}"
        },
        "partner" : {
          "type" : "object",
          "description" : "Basic partner information",
          "properties" : {
            "firstName" : {
              "type" : "string",
              "description" : "First name of the user"
            },
            "lastName" : {
              "type" : "string",
              "description" : "Last name of the user"
            },
            "dateOfBirth" : {
              "type" : "string",
              "description" : "Birth date of the user. In the format YYYY-MM-DD."
            }
          },
          "required" : [ "dateOfBirth", "firstName", "lastName" ]
        },
        "address" : {
          "type" : "object",
          "description" : "An postal address",
          "properties" : {
            "street" : {
              "type" : "string",
              "description" : "Street"
            },
            "houseNumber" : {
              "type" : "string",
              "description" : "House number"
            },
            "zip" : {
              "type" : "string",
              "description" : "Zip code"
            },
            "city" : {
              "type" : "string",
              "description" : "City"
            },
            "country" : {
              "type" : "string",
              "description" : "Country"
            }
          },
          "required" : [ "city", "country", "houseNumber", "street", "zip" ]
        },
        "events" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "timestamp" : {
                "type" : "string",
                "format" : "date-time"
              },
              "name" : {
                "type" : "string",
                "enum" : [ "INBOX_ORIGINATOR", "SCAN_DATE" ]
              }
            },
            "required" : [ "name", "timestamp" ]
          }
        },
        "documentMetas" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DocumentMetadata"
          }
        }
      },
      "description" : "The metadata of a processing order."
    }
  }
}
